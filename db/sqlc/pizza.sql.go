// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: pizza.sql

package db

import (
	"context"
)

const createPizza = `-- name: CreatePizza :one
INSERT INTO pizza (
  order_id,
  price,
  pizza_type,
  pizza_quant
) VALUES (
  $1, $2, $3, $4
) RETURNING id, order_id, price, pizza_type, pizza_quant
`

type CreatePizzaParams struct {
	OrderID    int64  `json:"order_id"`
	Price      int64  `json:"price"`
	PizzaType  string `json:"pizza_type"`
	PizzaQuant int64  `json:"pizza_quant"`
}

func (q *Queries) CreatePizza(ctx context.Context, arg CreatePizzaParams) (Pizza, error) {
	row := q.db.QueryRowContext(ctx, createPizza,
		arg.OrderID,
		arg.Price,
		arg.PizzaType,
		arg.PizzaQuant,
	)
	var i Pizza
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Price,
		&i.PizzaType,
		&i.PizzaQuant,
	)
	return i, err
}

const getPizza = `-- name: GetPizza :one
SELECT id, order_id, price, pizza_type, pizza_quant FROM pizza
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPizza(ctx context.Context, id int64) (Pizza, error) {
	row := q.db.QueryRowContext(ctx, getPizza, id)
	var i Pizza
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Price,
		&i.PizzaType,
		&i.PizzaQuant,
	)
	return i, err
}

const listPizzas = `-- name: ListPizzas :many
SELECT id, order_id, price, pizza_type, pizza_quant FROM pizza
WHERE order_id IS NOT NULL
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPizzasParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPizzas(ctx context.Context, arg ListPizzasParams) ([]Pizza, error) {
	rows, err := q.db.QueryContext(ctx, listPizzas, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Pizza{}
	for rows.Next() {
		var i Pizza
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Price,
			&i.PizzaType,
			&i.PizzaQuant,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
